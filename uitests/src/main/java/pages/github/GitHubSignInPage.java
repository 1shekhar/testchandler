package pages.github;

import core.Elemental;
import org.apache.logging.log4j.LogManager;
import org.apache.logging.log4j.Logger;
import org.openqa.selenium.NoSuchElementException;
import org.openqa.selenium.WebElement;
import pages.addrepositories.AddRepositoriesPage;
import pages.administration.onboarding.OnboardingForNewOrganizationPage;
import pages.commons.ToastNotifications;
import pages.repositorylist.RepositoryListPage;
import pages.termsandservice.TermsAndServicePage;
import utilities.OAuthHandler;

import static pages.commons.PrimaryHeader.displayRepositoriesLinkInHeader;

public class GitHubSignInPage extends Elemental {
    private static final Logger logger = LogManager.getLogger(GitHubSignInPage.class.getName());
    private static final String GITHUB_SESSION_URL = "https://github.com/session";

    private static void setGithubSignInCode() {
        OAuthHandler oAuthHandler = new OAuthHandler();
        /*This method is used to store GitHub code generated by registerd GitHubApp.
        Two Approaches:
        1. Get auth creds of getG registered Embold apps and get this code by executing GH OAuth requests.
        Perform this action before Embold sign in via APIs, generate code and you can access Embold
            2. Get this code simply from browser URL field which is generated during Embold Sign in on () -> UI
            To do: Tests around this code are yet to be implemented later.
                3. You need this code to generate Embold Access Token in order to access getG Embold APIs.
                Known bottleneck: You cannot use one GH token twice. During sign in from UI, above token is already consumed
                We need an API endpoint which give us Embold token in return*/

        String callbackURI = driver.getCurrentUrl();
        OAuthHandler.setGitHubAccessCode(callbackURI, "ghcode");
        oAuthHandler.setEmboldAccessToken("token");
        logger.info("AccessToken:" + OAuthHandler.getEmboldAccessToken("token"));
    }

    public WebElement displayGitHubUsernameField() throws NoSuchElementException {
        return getClickableElement("github_username_field", 5);
    }

    public WebElement displayGitHubPasswordField() throws NoSuchElementException {
        return getClickableElement("github_password_field", 5);
    }

    public WebElement displayGitHubSignInButton() throws NoSuchElementException {
        return getClickableElement("github_signIn_button", 5);
    }

    public boolean verifyGitHubSignInPageURL() {
        return driver.getCurrentUrl().contains("github.com/login");
    }

    public boolean verifyIncorrectGitHubSession() {
        return driver.getCurrentUrl().contains(GITHUB_SESSION_URL);
    }

    public boolean checkIfGitHubAccountIsVerified() {
        boolean result;
        if (System.getProperty("ghuser") == null || System.getProperty("ghpass") == null) {
            return !signInToGitHub(System.getenv("ghuser"), System.getenv("ghpass"));
        } else {
            result = signInToGitHub(System.getProperty("ghuser"), System.getProperty("ghpass"));
            //Add case if both env var and property value is null. Terminate execution in such case.
        }
        return !result;
    }

    public boolean signInToGitHub(String username, String password) {
        if (verifyGitHubSignInPageURL()) {
            displayGitHubUsernameField().sendKeys(username);
            displayGitHubPasswordField().sendKeys(password);
            displayGitHubSignInButton().click();
            //setGithubSignInCode();
            if (verifyIncorrectGitHubSession()) {
                ghSignInState = false;
                logger.fatal("Invalid GitHub credentials.");
                return ghSignInState;
            } else if (GitHubAccountVerificationPage.verifyAccountVerificationPageURL()) {
                ghSignInState = false;
                logger.warn("Provided GitHub account is not verified");
                return ghSignInState;
            } else {
                ghSignInState = true;
                logger.info("GitHub login successful.");
                return ghSignInState;
            }
        }
        return ghSignInState;
    }

    public void accessEmbold(InstallEmboldAppOnGitHubPage appOnGitHub,
                             TermsAndServicePage servicePage,
                             OnboardingForNewOrganizationPage organizationPage,
                             RepositoryListPage repositoryListPage,
                             AddRepositoriesPage addRepositoriesPage) {
        waitTillRequestIsProcessed(2);
        if (appOnGitHub.verifyAuthorizationPageURL()) {
            logger.info("Authorizing Embold App on GitHub");
            appOnGitHub.authorizeEmboldApp();
            waitTillRequestIsProcessed(3);
            fluentWaitForWebElement("embold_logo");
        }
        if (servicePage.verifyConsentPageURL()) {
            logger.info("Accepting Terms and Service agreement...");
            servicePage.acceptTermsAndService();
        }
        if (addRepositoriesPage.verifyAddRepositoriesPageURL()) {
            addRepositoriesPage.displayLinkRepositoriesIllustration();
            logger.info("No repository is added to Embold. Adding repository to Embold...");
            addRepositoriesPage.setRepositoryName();
            waitTillRequestIsProcessed(2);
            addRepositoriesPage.addGitHubRepositoriesToEmbold();
        }
        if (organizationPage.verifyOnboardingPageURL()) {
            logger.info("User is on onboarding page.");
            waitTillRequestIsProcessed(2);
            //add here - if not displayed
            if (OnboardingForNewOrganizationPage.displayInstallEmboldAppWarning()) {
                logger.info("Install Embold app warning displayed.");
                organizationPage.installEmboldAppOnGitHub(appOnGitHub);
                waitTillRequestIsProcessed(2);
                if (organizationPage.verifySuccessToastDisplayed()) {
                    ToastNotifications.displayCloseButtonOnToaster().click();
                    logger.info("Embold App installed successfully.");
                    displayRepositoriesLinkInHeader().click();
                    waitTillRequestIsProcessed(3);
                    if (addRepositoriesPage.verifyAddRepositoriesPageURL()) {
                        addRepositoriesPage.displayLinkRepositoriesIllustration();
                        logger.info("No repository is added to Embold. Adding repository to Embold...");
                        addRepositoriesPage.setRepositoryName();
                        waitTillRequestIsProcessed(2);
                        addRepositoriesPage.addGitHubRepositoriesToEmbold();
                    }
                    waitTillRequestIsProcessed(1);
                } else if (addRepositoriesPage.verifyAddRepositoriesPageURL()) {
                    addRepositoriesPage.displayLinkRepositoriesIllustration();
                    logger.info("No repository is added to Embold. Adding repository to Embold...");
                    addRepositoriesPage.setRepositoryName();
                    waitTillRequestIsProcessed(2);
                    addRepositoriesPage.addGitHubRepositoriesToEmbold();
                } else if (organizationPage.displayWelcomeAboardMessage().isDisplayed()) {
                    logger.info("Welcome aboard message displayed.");
                    organizationPage.addGitHubOrganizationToEmbold(appOnGitHub);
                }
            }
        }
        if (RepositoryListPage.verifyRepositoryListPageURL()) {
            logger.info("Repository List page is displayed.");
            repositoryListPage.displayEmboldLogoOnRepositoryListPage();
        }
    }
}
